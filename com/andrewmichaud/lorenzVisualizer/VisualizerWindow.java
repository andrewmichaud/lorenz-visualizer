/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.andrewmichaud.lorenzVisualizer;

import java.util.LinkedList;
import java.util.List;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author Andrew
 */
public class VisualizerWindow extends javax.swing.JFrame {

    ///////////////
    // CONSTANTS //
    //////////////
    
    // Different axis arrangements for graphs
    public static int X_Y_AXES = 1;
    public static int Y_Z_AXES = 2;
    public static int Z_X_AXES = 3;
    
    // Max steps we allow per LorenzSystem object.  To save memory.
    public static double MAX_STEPS = 500.0;
    
    //////////////////
    // DATA MEMBERS //
    /////////////////
    
    // Initial values for graph.
    private double initT_;
    private double initX_;
    private double initY_;
    private double initZ_;
    
    // Array of previous values.
    private Double[] initialPoint_;
    
    // Final T we reach.
    private double finalT_;
    
    // Stepsize and number of steps (calculated from stepsize and range).
    private double timeStep_;
    private double steps_;
    
    // Lorenz systems to plot.
    private List<LorenzSystem> systems_;
    
    // Whether we animate the plot or draw it all at once.
    private boolean animate_ = false;
    
    // Which axes we use in our graph.
    private int graphType_;
    
    // Lorenz Parameters
    private double rho_;
    private double sigma_;
    private double beta_;
    
    private Double[] params_;
    
    /**
     * Creates new form VisualizerWindow
     */
    public VisualizerWindow() {
        initComponents();
    }
    
    
    // Generate Lorenz Systems for the plot.
    public void generateSystems(boolean animate) {
        
        // Grab initial values.
        initT_ = (Double)tSpinner.getValue();
        initX_ = (Double)xSpinner.getValue();
        initY_ = (Double)ySpinner.getValue();
        initZ_ = (Double)zSpinner.getValue();
        
        // Grab final time and timeStep.
        finalT_ = (Double)finalTSpinner.getValue();
        timeStep_ = (Double)timeStepSpinner.getValue();
        
        // Package up the initial values for the Lorenz system.
        initialPoint_ = new Double[]{initX_, initY_, initZ_};
        
        // Calculate number of steps from range and stepsize.
        steps_ = (finalT_ - initT_) / timeStep_;
        
        // Initialize the LinkedList of LorenzSystems.
        systems_ = new LinkedList<>();
        
        // Grab Lorenz parameters.
        rho_ = (Double)rhoSpinner.getValue();
        sigma_ = (Double)sigmaSpinner.getValue();
        beta_ = (Double)rhoSpinner.getValue();
        params_ = new Double[]{rho_, sigma_, beta_};

        // If there are more than 500 steps, use multiple Lorenz systems.
        LorenzSystem system;
        if (steps_ >= MAX_STEPS) {
            Double[] curValues = initialPoint_;
            double curRemainingSteps = steps_ - MAX_STEPS;
            double curStart = initT_;
            double curEnd = initT_ + MAX_STEPS * timeStep_;
            
            while (curRemainingSteps > 0) {
                system = new LorenzSystem(curValues, params_);
                system.rk4Range(curStart, curEnd, timeStep_);
                curValues = system.getLastPoint();
                curStart = curEnd;
                curEnd += MAX_STEPS * timeStep_;
                curRemainingSteps -= MAX_STEPS;
                systems_.add(system);
            }
            curEnd = finalT_;
            system = new LorenzSystem(curValues, params_);
            system.rk4Range(curStart, curEnd, timeStep_);
            systems_.add(system);
        } else {
            system = new LorenzSystem(initialPoint_, params_);
            system.rk4Range(initT_, finalT_, timeStep_);
            systems_.add(system);
        }
        graphPanel1.setInitialPoint(initialPoint_);
        graphPanel1.setSystems(systems_, animate, graphType_);
        graphPanel1.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphButtonGroup = new javax.swing.ButtonGroup();
        graphControlsPanel = new javax.swing.JPanel();
        animateToggleButton = new javax.swing.JToggleButton();
        replotButton = new javax.swing.JButton();
        xyPlot = new javax.swing.JRadioButton();
        yzPlot = new javax.swing.JRadioButton();
        zxPlot = new javax.swing.JRadioButton();
        parametersPanel = new javax.swing.JPanel();
        initialConditionsLabel = new javax.swing.JLabel();
        xSpinnerLabel = new javax.swing.JLabel();
        xSpinner = new javax.swing.JSpinner();
        tSpinnerLabel = new javax.swing.JLabel();
        tSpinner = new javax.swing.JSpinner();
        ySpinnerLabel = new javax.swing.JLabel();
        ySpinner = new javax.swing.JSpinner();
        zSpinnerLabel = new javax.swing.JLabel();
        zSpinner = new javax.swing.JSpinner();
        finalTSpinnerLabel = new javax.swing.JLabel();
        finalTSpinner = new javax.swing.JSpinner();
        timeStepSpinnerLabel = new javax.swing.JLabel();
        timeStepSpinner = new javax.swing.JSpinner();
        LorenzParametersLabel = new javax.swing.JLabel();
        rhoSpinnerLabel = new javax.swing.JLabel();
        sigmaSpinnerLabel = new javax.swing.JLabel();
        betaSpinnerLabel = new javax.swing.JLabel();
        rhoSpinner = new javax.swing.JSpinner();
        sigmaSpinner = new javax.swing.JSpinner();
        betaSpinner = new javax.swing.JSpinner();
        graphPanel1 = new com.andrewmichaud.lorenzVisualizer.GraphPanel();
        visualizerMenu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        graphControlsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        animateToggleButton.setText("Animate");
        animateToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animateToggleButtonActionPerformed(evt);
            }
        });

        replotButton.setText("Replot");
        replotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replotButtonActionPerformed(evt);
            }
        });

        graphButtonGroup.add(xyPlot);
        xyPlot.setText("X-Y Plot");
        xyPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xyPlotActionPerformed(evt);
            }
        });

        graphButtonGroup.add(yzPlot);
        yzPlot.setText("Y-Z Plot");
        yzPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yzPlotActionPerformed(evt);
            }
        });

        graphButtonGroup.add(zxPlot);
        zxPlot.setText("Z-X Plot");
        zxPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zxPlotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout graphControlsPanelLayout = new javax.swing.GroupLayout(graphControlsPanel);
        graphControlsPanel.setLayout(graphControlsPanelLayout);
        graphControlsPanelLayout.setHorizontalGroup(
            graphControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xyPlot)
                .addGap(36, 36, 36)
                .addComponent(yzPlot)
                .addGap(41, 41, 41)
                .addComponent(zxPlot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                .addComponent(animateToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replotButton)
                .addContainerGap())
        );
        graphControlsPanelLayout.setVerticalGroup(
            graphControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(graphControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(animateToggleButton)
                    .addComponent(replotButton)
                    .addComponent(xyPlot)
                    .addComponent(yzPlot)
                    .addComponent(zxPlot))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        parametersPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        initialConditionsLabel.setText("Inital Conditions");

        xSpinnerLabel.setText("Initial x");

        xSpinner.setModel(new SpinnerNumberModel(1.0, -100.00, 100.00, 0.10));

        tSpinnerLabel.setText("Initial t");

        tSpinner.setModel(new SpinnerNumberModel(0.0, 0.0, 1000.0, 0.1));

        ySpinnerLabel.setText("Initial y");

        ySpinner.setModel(new SpinnerNumberModel(1.00, -100.00, 100.00, 0.10));

        zSpinnerLabel.setText("Initial z");

        zSpinner.setValue(1);
        zSpinner.setModel(new SpinnerNumberModel(1.00, -100.00, 100.00, 0.10));

        finalTSpinnerLabel.setText("Final t");

        finalTSpinner.setModel(new SpinnerNumberModel(100.00, 0.00, 100000.00, 0.10));

        timeStepSpinnerLabel.setText("Time Step");

        timeStepSpinner.setModel(new SpinnerNumberModel(0.010, 0.0001, 10.00, 0.0001));

        LorenzParametersLabel.setText("Lorenz Parameters");

        rhoSpinnerLabel.setText("Rho");

        sigmaSpinnerLabel.setText("Sigma");

        betaSpinnerLabel.setText("Beta");

        rhoSpinner.setModel(new SpinnerNumberModel(28.0, -100.0, 100.0, 0.1));

        sigmaSpinner.setModel(new SpinnerNumberModel(10.000, -100.000, 100.000, 0.100));

        betaSpinner.setModel(new SpinnerNumberModel(2.666667, -100.000000, 100.000000, 0.100000));

        javax.swing.GroupLayout parametersPanelLayout = new javax.swing.GroupLayout(parametersPanel);
        parametersPanel.setLayout(parametersPanelLayout);
        parametersPanelLayout.setHorizontalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xSpinner)
                    .addComponent(zSpinner)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parametersPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ySpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zSpinnerLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(finalTSpinner)
                    .addComponent(timeStepSpinnerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeStepSpinner)
                    .addComponent(LorenzParametersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rhoSpinnerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sigmaSpinnerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(betaSpinnerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rhoSpinner)
                    .addComponent(sigmaSpinner)
                    .addGroup(parametersPanelLayout.createSequentialGroup()
                        .addGroup(parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(initialConditionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(xSpinnerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tSpinnerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ySpinnerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(finalTSpinnerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(betaSpinner))
                .addContainerGap())
        );
        parametersPanelLayout.setVerticalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(initialConditionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tSpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xSpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ySpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zSpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finalTSpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finalTSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeStepSpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeStepSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LorenzParametersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rhoSpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rhoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sigmaSpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sigmaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(betaSpinnerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(betaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        graphPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout graphPanel1Layout = new javax.swing.GroupLayout(graphPanel1);
        graphPanel1.setLayout(graphPanel1Layout);
        graphPanel1Layout.setHorizontalGroup(
            graphPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphPanel1Layout.setVerticalGroup(
            graphPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("File");
        visualizerMenu.add(jMenu1);

        jMenu2.setText("Edit");
        visualizerMenu.add(jMenu2);

        setJMenuBar(visualizerMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(graphControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(graphPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(parametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(graphPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(graphControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void animateToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animateToggleButtonActionPerformed
        // TODO fix animation so it actually works.
        //animate_ = !animate_;
    }//GEN-LAST:event_animateToggleButtonActionPerformed

    private void replotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replotButtonActionPerformed
        generateSystems(animate_);
        graphPanel1.repaint();
    }//GEN-LAST:event_replotButtonActionPerformed

    private void xyPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xyPlotActionPerformed
        graphType_ = X_Y_AXES;
        graphPanel1.repaint();
    }//GEN-LAST:event_xyPlotActionPerformed

    private void yzPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yzPlotActionPerformed
        graphType_ = Y_Z_AXES;
        graphPanel1.repaint();
    }//GEN-LAST:event_yzPlotActionPerformed

    private void zxPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zxPlotActionPerformed
        graphType_ = Z_X_AXES;
        graphPanel1.repaint();
    }//GEN-LAST:event_zxPlotActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualizerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualizerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualizerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualizerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                VisualizerWindow window = new VisualizerWindow();
                window.generateSystems(window.animate_);
                window.setVisible(true);

            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LorenzParametersLabel;
    private javax.swing.JToggleButton animateToggleButton;
    private javax.swing.JSpinner betaSpinner;
    private javax.swing.JLabel betaSpinnerLabel;
    private javax.swing.JSpinner finalTSpinner;
    private javax.swing.JLabel finalTSpinnerLabel;
    private javax.swing.ButtonGroup graphButtonGroup;
    private javax.swing.JPanel graphControlsPanel;
    private com.andrewmichaud.lorenzVisualizer.GraphPanel graphPanel1;
    private javax.swing.JLabel initialConditionsLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JButton replotButton;
    private javax.swing.JSpinner rhoSpinner;
    private javax.swing.JLabel rhoSpinnerLabel;
    private javax.swing.JSpinner sigmaSpinner;
    private javax.swing.JLabel sigmaSpinnerLabel;
    private javax.swing.JSpinner tSpinner;
    private javax.swing.JLabel tSpinnerLabel;
    private javax.swing.JSpinner timeStepSpinner;
    private javax.swing.JLabel timeStepSpinnerLabel;
    private javax.swing.JMenuBar visualizerMenu;
    private javax.swing.JSpinner xSpinner;
    private javax.swing.JLabel xSpinnerLabel;
    private javax.swing.JRadioButton xyPlot;
    private javax.swing.JSpinner ySpinner;
    private javax.swing.JLabel ySpinnerLabel;
    private javax.swing.JRadioButton yzPlot;
    private javax.swing.JSpinner zSpinner;
    private javax.swing.JLabel zSpinnerLabel;
    private javax.swing.JRadioButton zxPlot;
    // End of variables declaration//GEN-END:variables
}
